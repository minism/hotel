// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/spawner-service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_OK Status = 0
)

var Status_name = map[int32]string{
	0: "OK",
}

var Status_value = map[string]int32{
	"OK": 0,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_028c64f744b4b475, []int{0}
}

type TestRequest struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_028c64f744b4b475, []int{0}
}

func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestRequest.Unmarshal(m, b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return xxx_messageInfo_TestRequest.Size(m)
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type TestResponse struct {
	Status               Status   `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_028c64f744b4b475, []int{1}
}

func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestResponse.Unmarshal(m, b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return xxx_messageInfo_TestResponse.Size(m)
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func init() {
	proto.RegisterEnum("proto.Status", Status_name, Status_value)
	proto.RegisterType((*TestRequest)(nil), "proto.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "proto.TestResponse")
}

func init() { proto.RegisterFile("proto/spawner-service.proto", fileDescriptor_028c64f744b4b475) }

var fileDescriptor_028c64f744b4b475 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2e, 0x48, 0x2c, 0xcf, 0x4b, 0x2d, 0xd2, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xd5, 0x03, 0x8b, 0x0a, 0xb1, 0x82, 0x29, 0x25, 0x45, 0x2e, 0xee, 0x90, 0xd4, 0xe2, 0x92,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xa4, 0xfc, 0x94, 0x4a, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0xc9, 0x94, 0x8b, 0x07, 0xa2, 0xa4, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x55, 0x48, 0x95, 0x8b, 0xad, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0x18, 0xac, 0x8a,
	0xcf, 0x88, 0x17, 0x62, 0xa2, 0x5e, 0x30, 0x58, 0x30, 0x08, 0x2a, 0xa9, 0x25, 0xc0, 0xc5, 0x06,
	0x11, 0x11, 0x62, 0xe3, 0x62, 0xf2, 0xf7, 0x16, 0x60, 0x30, 0x72, 0xe6, 0xe2, 0x0b, 0x86, 0xb8,
	0x25, 0x18, 0xe2, 0x14, 0x21, 0x43, 0x2e, 0x96, 0x10, 0xb0, 0xb5, 0x50, 0x23, 0x90, 0x9c, 0x22,
	0x25, 0x8c, 0x22, 0x06, 0xb1, 0x5b, 0x89, 0x21, 0x89, 0x0d, 0x2c, 0x6a, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x13, 0x82, 0x42, 0x1a, 0xdd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpawnerServiceClient is the client API for SpawnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpawnerServiceClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type spawnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpawnerServiceClient(cc *grpc.ClientConn) SpawnerServiceClient {
	return &spawnerServiceClient{cc}
}

func (c *spawnerServiceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/proto.SpawnerService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpawnerServiceServer is the server API for SpawnerService service.
type SpawnerServiceServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedSpawnerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpawnerServiceServer struct {
}

func (*UnimplementedSpawnerServiceServer) Test(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterSpawnerServiceServer(s *grpc.Server, srv SpawnerServiceServer) {
	s.RegisterService(&_SpawnerService_serviceDesc, srv)
}

func _SpawnerService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpawnerServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SpawnerService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpawnerServiceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpawnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SpawnerService",
	HandlerType: (*SpawnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _SpawnerService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/spawner-service.proto",
}
