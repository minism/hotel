// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/master-service.proto

package hotel_pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegisterSpawnerRequest struct {
	// The hostname that the spawner should be accessed by.
	// Optional, if this is set to the emptry string, the host is inferred automatically by the request.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The port that this spawner should be accessed by.
	// Required.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The initial status for the spawner instance (includes the game ID).
	Status               *SpawnerStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RegisterSpawnerRequest) Reset()         { *m = RegisterSpawnerRequest{} }
func (m *RegisterSpawnerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterSpawnerRequest) ProtoMessage()    {}
func (*RegisterSpawnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3cfa9e19c71843, []int{0}
}

func (m *RegisterSpawnerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterSpawnerRequest.Unmarshal(m, b)
}
func (m *RegisterSpawnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterSpawnerRequest.Marshal(b, m, deterministic)
}
func (m *RegisterSpawnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSpawnerRequest.Merge(m, src)
}
func (m *RegisterSpawnerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterSpawnerRequest.Size(m)
}
func (m *RegisterSpawnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSpawnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSpawnerRequest proto.InternalMessageInfo

func (m *RegisterSpawnerRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RegisterSpawnerRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RegisterSpawnerRequest) GetStatus() *SpawnerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type RegisterSpawnerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterSpawnerResponse) Reset()         { *m = RegisterSpawnerResponse{} }
func (m *RegisterSpawnerResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterSpawnerResponse) ProtoMessage()    {}
func (*RegisterSpawnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a3cfa9e19c71843, []int{1}
}

func (m *RegisterSpawnerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterSpawnerResponse.Unmarshal(m, b)
}
func (m *RegisterSpawnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterSpawnerResponse.Marshal(b, m, deterministic)
}
func (m *RegisterSpawnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterSpawnerResponse.Merge(m, src)
}
func (m *RegisterSpawnerResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterSpawnerResponse.Size(m)
}
func (m *RegisterSpawnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterSpawnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterSpawnerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterSpawnerRequest)(nil), "hotel_pb.RegisterSpawnerRequest")
	proto.RegisterType((*RegisterSpawnerResponse)(nil), "hotel_pb.RegisterSpawnerResponse")
}

func init() { proto.RegisterFile("proto/master-service.proto", fileDescriptor_0a3cfa9e19c71843) }

var fileDescriptor_0a3cfa9e19c71843 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0x41, 0x4f, 0x84, 0x30,
	0x10, 0x85, 0xad, 0x1a, 0xa2, 0x35, 0xc4, 0xa4, 0x07, 0x41, 0x4e, 0x95, 0x13, 0x17, 0x21, 0xc1,
	0xdf, 0xe1, 0xa5, 0x5c, 0xbc, 0x19, 0x20, 0x13, 0x21, 0x11, 0xa6, 0x74, 0x06, 0xfd, 0xfb, 0x86,
	0x16, 0xb3, 0xc9, 0xee, 0x66, 0x6f, 0x93, 0xf7, 0xbe, 0xbe, 0xd7, 0x27, 0x33, 0xeb, 0x90, 0xb1,
	0x9a, 0x5a, 0x62, 0x70, 0xaf, 0x04, 0xee, 0x67, 0xec, 0xa1, 0xf4, 0xa2, 0xba, 0x1b, 0x90, 0xe1,
	0xfb, 0xd3, 0x76, 0x99, 0x0a, 0x54, 0x8f, 0xd3, 0x84, 0x73, 0x70, 0xf3, 0x45, 0x3e, 0x19, 0xf8,
	0x1a, 0xb7, 0x77, 0x8d, 0x6d, 0x7f, 0x67, 0x70, 0x06, 0x96, 0x15, 0x88, 0x95, 0x92, 0xb7, 0x03,
	0x12, 0xa7, 0x42, 0x8b, 0xe2, 0xde, 0xf8, 0x7b, 0xd3, 0x2c, 0x3a, 0x4e, 0xaf, 0xb5, 0x28, 0x62,
	0xe3, 0x6f, 0x55, 0xc9, 0x88, 0xb8, 0xe5, 0x95, 0xd2, 0x1b, 0x2d, 0x8a, 0x87, 0x3a, 0x29, 0xff,
	0x0b, 0xcb, 0x3d, 0xb1, 0xf1, 0xb6, 0xd9, 0xb1, 0xfc, 0x59, 0x26, 0x27, 0x95, 0x64, 0x71, 0x26,
	0xa8, 0x47, 0x19, 0xbf, 0xfb, 0x0d, 0x4d, 0x98, 0xa0, 0x3e, 0xe4, 0xe3, 0x11, 0xab, 0xf4, 0x21,
	0xff, 0xfc, 0xcf, 0xb3, 0x97, 0x0b, 0x44, 0x28, 0xca, 0xaf, 0xba, 0xc8, 0xef, 0x7f, 0xfb, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0xee, 0xfe, 0xe5, 0x3b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServiceClient interface {
	// Notify the master service that a spawner is available. This is used
	// instead of some service discovery mechanism by the master.
	RegisterSpawner(ctx context.Context, in *RegisterSpawnerRequest, opts ...grpc.CallOption) (*RegisterSpawnerResponse, error)
}

type masterServiceClient struct {
	cc *grpc.ClientConn
}

func NewMasterServiceClient(cc *grpc.ClientConn) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) RegisterSpawner(ctx context.Context, in *RegisterSpawnerRequest, opts ...grpc.CallOption) (*RegisterSpawnerResponse, error) {
	out := new(RegisterSpawnerResponse)
	err := c.cc.Invoke(ctx, "/hotel_pb.MasterService/RegisterSpawner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
type MasterServiceServer interface {
	// Notify the master service that a spawner is available. This is used
	// instead of some service discovery mechanism by the master.
	RegisterSpawner(context.Context, *RegisterSpawnerRequest) (*RegisterSpawnerResponse, error)
}

// UnimplementedMasterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (*UnimplementedMasterServiceServer) RegisterSpawner(ctx context.Context, req *RegisterSpawnerRequest) (*RegisterSpawnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSpawner not implemented")
}

func RegisterMasterServiceServer(s *grpc.Server, srv MasterServiceServer) {
	s.RegisterService(&_MasterService_serviceDesc, srv)
}

func _MasterService_RegisterSpawner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSpawnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RegisterSpawner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel_pb.MasterService/RegisterSpawner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RegisterSpawner(ctx, req.(*RegisterSpawnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hotel_pb.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSpawner",
			Handler:    _MasterService_RegisterSpawner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/master-service.proto",
}
